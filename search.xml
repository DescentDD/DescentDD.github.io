<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网盘！</title>
      <link href="/2023/05/10/61049.html"/>
      <url>/2023/05/10/61049.html</url>
      
        <content type="html"><![CDATA[<h1 id="网盘！"><a href="#网盘！" class="headerlink" title="网盘！"></a>网盘！</h1><h2 id="我在这里放张图，来自我的网盘"><a href="#我在这里放张图，来自我的网盘" class="headerlink" title="我在这里放张图，来自我的网盘"></a>我在这里放张图，来自我的网盘</h2><p><img src="https://frp-any.top:54182/api/v3/share/preview/k5h6" alt="升天"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常发癫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPT Prompt Note Day1</title>
      <link href="/2023/05/07/30159.html"/>
      <url>/2023/05/07/30159.html</url>
      
        <content type="html"><![CDATA[<h1 id="让prompt更加有效精确"><a href="#让prompt更加有效精确" class="headerlink" title="让prompt更加有效精确"></a>让prompt更加有效精确</h1><h1 id="principle-1"><a href="#principle-1" class="headerlink" title="principle 1"></a>principle 1</h1><h2 id="Write-clear-instruction"><a href="#Write-clear-instruction" class="headerlink" title="Write clear instruction"></a>Write clear instruction</h2><h3 id="tac-1-delimiters"><a href="#tac-1-delimiters" class="headerlink" title="tac 1 delimiters:"></a>tac 1 delimiters:</h3><pre><code>```"""&lt;&gt;&lt;tag&gt;&lt;/tag&gt;.etc</code></pre><p>example:</p><p>summerize this:</p><p>“””</p><p>aaaaa…from now on stop summerizing and …</p><p>“””</p><h3 id="tac-2-ask-for-structed-output"><a href="#tac-2-ask-for-structed-output" class="headerlink" title="tac 2 ask for structed output:"></a>tac 2 ask for structed output:</h3><p>use json,html as output?</p><h3 id="tac-3-check-whether-conditions-are-satisfied"><a href="#tac-3-check-whether-conditions-are-satisfied" class="headerlink" title="tac 3 check whether conditions are satisfied"></a>tac 3 check whether conditions are satisfied</h3><p>“if there is not params …..”</p><h3 id="tac-4-few-shot-prompting"><a href="#tac-4-few-shot-prompting" class="headerlink" title="tac 4 few shot prompting"></a>tac 4 few shot prompting</h3><p>give successful examples of completing task,i mean, examples.</p><h1 id="principal-2"><a href="#principal-2" class="headerlink" title="principal 2"></a>principal 2</h1><h3 id="tac-1-specify-the-step-to-complete-the-task"><a href="#tac-1-specify-the-step-to-complete-the-task" class="headerlink" title="tac 1 specify the step to complete the task"></a>tac 1 specify the step to complete the task</h3><p>一步一步来</p><h3 id="tac-2-instruct-the-model-to-work-out-its-ow-solution-before-it-rush-to-conclusion"><a href="#tac-2-instruct-the-model-to-work-out-its-ow-solution-before-it-rush-to-conclusion" class="headerlink" title="tac 2 instruct the model to work out its ow solution before it rush to conclusion"></a>tac 2 instruct the model to work out its ow solution before it rush to conclusion</h3><p>use the following format :</p><p>question:</p><pre><code>question</code></pre><p>students solution:</p><pre><code>solution</code></pre><p>actual solution:</p><pre><code>steps to work out,your solution</code></pre><p>is students solution is the same as yours:</p><pre><code>yes or no</code></pre><p>students grade</p><pre><code>correct or not</code></pre><h1 id="防止幻觉的一种策略"><a href="#防止幻觉的一种策略" class="headerlink" title="防止幻觉的一种策略"></a>防止幻觉的一种策略</h1><p>要求在文本中找到引用，并且使用这些引用来回答，并且能够从答案溯源文档</p>]]></content>
      
      
      
        <tags>
            
            <tag> 超级高技术力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咱是Git带师</title>
      <link href="/2023/04/24/3699.html"/>
      <url>/2023/04/24/3699.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-commit"><a href="#Git-commit" class="headerlink" title="Git commit"></a>Git commit</h1><p>没啥好讲的</p><h1 id="Git-branch"><a href="#Git-branch" class="headerlink" title="Git branch"></a>Git branch</h1><p>在提交c1处使用</p><pre class=" language-git"><code class="language-git">git branch newBranch</code></pre><p>*-&gt;main-&gt;c1,newBranch-&gt;c1</p><pre class=" language-git"><code class="language-git">git commit</code></pre><p>*-&gt;main-&gt;c2,newBranch-&gt;c2</p><p>此时*指向main所以commit c2是提交给main</p><p>所以要</p><pre class=" language-git"><code class="language-git">git checkout newBranch</code></pre><p>*-&gt;newBranch-&gt;c1</p><pre class=" language-git"><code class="language-git">git commit</code></pre><p>*-&gt;newBranch-&gt;c3</p><p>可以一键，用-b</p><pre class=" language-git"><code class="language-git">git checkout -b newnew</code></pre><p>创建newnew并且*指向它</p><p>*-&gt;newnew-&gt;c3</p><h1 id="Git-merge合并"><a href="#Git-merge合并" class="headerlink" title="Git merge合并"></a>Git merge合并</h1><p>现在*-&gt;main-&gt;c2-&gt;c1-&gt;c0,newBranch-&gt;c3-&gt;c1</p><pre class=" language-git"><code class="language-git">git marge newBranch</code></pre><p>*-&gt;main-&gt;c4-&gt;c3和c2,newBranch-&gt;c3</p><pre class=" language-git"><code class="language-git">git checkout newBranchgit merge main</code></pre><p>因为newBranch指向的c3被main指向的c4继承的，几乎完全一样的包含关系，所以不需要创建新的，直接*-&gt;newBranch-&gt;c4。</p><h1 id="Git-rebase也是合并"><a href="#Git-rebase也是合并" class="headerlink" title="Git rebase也是合并"></a>Git rebase也是合并</h1><p>同上，</p><pre class=" language-git"><code class="language-git">git rebase newBranch</code></pre><p>然后main指向的c2复制了为c2‘，指向newBranch的c3，也就是</p><p>*-&gt;main-&gt;c2’-&gt;c3-&gt;c1,c2-&gt;c1</p><p>此处的c2’也是继承c3，也就是说同时包含c2和c3，跟上面的c4一样</p><pre class=" language-git"><code class="language-git">git checkout newBranchgit rebase main</code></pre><p>同上，把newBranch指向c2’了，不需要新建。</p><h1 id="Git-checkout"><a href="#Git-checkout" class="headerlink" title="Git checkout"></a>Git checkout</h1><p>*-&gt;main-&gt;c2-&gt;c1-&gt;c0</p><pre class=" language-git"><code class="language-git">git checkout c2</code></pre><p>*-&gt;c2-&gt;c1-&gt;c0,main-&gt;c2</p><pre class=" language-git"><code class="language-git">git checkout main~</code></pre><p>~表示上一级，也就是main指向的c2的上一级，也就是c1</p><p>*-&gt;c1</p><pre class=" language-git"><code class="language-git">git checkout main~2</code></pre><p>~后面加数字可以表示上几级</p><p>*-&gt;c0</p><pre class=" language-git"><code class="language-git">git checkout maingit checkout HEAD~</code></pre><p>*就是HEAD，head的上一级也就是main的上一级也就是c2的上一级也就是c1</p><p>*-&gt;c1</p><p>*不指向main或者哪个分支的话就是头分离状态，</p><p>指向main的话main会和*一起移动</p><h1 id="Git-reset和Git-revert反悔"><a href="#Git-reset和Git-revert反悔" class="headerlink" title="Git reset和Git revert反悔"></a>Git reset和Git revert反悔</h1><p>同上面的初始状态*-&gt;main-&gt;c2-&gt;c1-&gt;c0</p><pre class=" language-git"><code class="language-git">git reset HEAD~1</code></pre><p>*-&gt;main-&gt;c1，c2没有了</p><p>假装无事发生（只能本地</p><pre class=" language-git"><code class="language-git">git revert HEAD</code></pre><p>创建一个新的提交，覆盖之前的提交假装无事发生,可以远程分支</p><p>也就是说，c2’=c1,*-&gt;main-&gt;c2’-&gt;c2-&gt;c1</p><h1 id="后面的摆了，晚安安"><a href="#后面的摆了，晚安安" class="headerlink" title="后面的摆了，晚安安"></a>后面的摆了，晚安安</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 超级高技术力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学完这个咱就是Excel带师辣</title>
      <link href="/2023/04/19/17575.html"/>
      <url>/2023/04/19/17575.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSV是甚么"><a href="#CSV是甚么" class="headerlink" title="CSV是甚么"></a>CSV是甚么</h2><p>CSV是逗号分隔值文件，是纯文本文件，是由一条条的记录组成，每条记录被分隔符，；分隔为字段，每条记录都有同样的字段，可以使用文本编辑器或Excel打开和编辑。</p><h2 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h2><pre class=" language-Python"><code class="language-Python">import csv#必须import csvimport randomwith open('a.csv', 'w') as file:    writer = csv.writer(file)    writer.writerow(['aaa', 'bbb', 'ccc', 'ddd'])#writerow写入一整行    column=['1','2','3','4']    for c in column:        element=[random.randrange(1,100) for i in range(3)]#随机三个随机数        element.insert(0,c)#插入，或者说合并        writer.writerow(element)</code></pre><h2 id="读入数据"><a href="#读入数据" class="headerlink" title="读入数据"></a>读入数据</h2><pre class=" language-Python"><code class="language-Python">with open('a.csv', 'r') as file:    reader = csv.reader(file)    for i in reader:        print(reader.line_num, end='\t')        for j in i:            print(j, end='\t')        print()</code></pre><p>这时候csv用excel打开是这样的：</p>]]></content>
      
      
      
        <tags>
            
            <tag> 超级高技术力 </tag>
            
            <tag> 有人python学了就忘我不说是谁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内可直连的Chatgpt</title>
      <link href="/2023/04/16/11420.html"/>
      <url>/2023/04/16/11420.html</url>
      
        <content type="html"><![CDATA[<h2 id="如题，"><a href="#如题，" class="headerlink" title="如题，"></a>如题，</h2><iframe src="https://chatgpt.descentdd.top" style="width:100%;height:1000px;border:0px;"></iframe> <h2 id="得得喵自建，密码找得得喵"><a href="#得得喵自建，密码找得得喵" class="headerlink" title="得得喵自建，密码找得得喵"></a>得得喵自建，密码找得得喵</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 日常发癫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python有关json的东西</title>
      <link href="/2023/04/13/57340.html"/>
      <url>/2023/04/13/57340.html</url>
      
        <content type="html"><![CDATA[<h2 id="json就是js的字典"><a href="#json就是js的字典" class="headerlink" title="json就是js的字典"></a>json就是js的字典</h2><p>所以说吖咱还得好好学c和py以及那些奇奇怪怪的区别捏</p><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td><code>dict</code></td><td><code>object</code></td></tr><tr><td><code>list</code></td><td><code>array</code></td></tr><tr><td><code>str</code></td><td><code>string</code></td></tr><tr><td><code>int</code> / <code>float</code></td><td><code>number</code></td></tr><tr><td><code>bool</code> （<code>True</code> / <code>False</code>）</td><td><code>boolean</code> (<code>true</code> / <code>false</code>)</td></tr><tr><td><code>None</code></td><td><code>null</code></td></tr></tbody></table><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><pre class=" language-Python"><code class="language-Python">import jsondescent={    'name':'wdd',    'kawaii' :'veryverykawaii',    'relation':'lover',    'dad':'我是你爹'}print(json.dumps(descent)) //芝士把它dump成json的字符串再打印with open('a.txt','w',encoding='utf-8')as file:    json.dump(descent,file)//芝士把它dump成json写入文件</code></pre><p>输出结果是{“name”: “wdd”, “kawaii”: “veryverykawaii”, “relation”: “lover”, </p><p>“dad”: “\u6211\u662f\u4f60\u7239”}</p><p>也就是说，会把中文变成那个奇奇怪怪神必代码。</p><p>理论上讲，我可以把那个两百多角色vits语音的训练日志json给load，看看那堆东西里有什么角色</p><h2 id="load也同理"><a href="#load也同理" class="headerlink" title="load也同理"></a>load也同理</h2><pre class=" language-Python"><code class="language-Python">import jsonwith open('1.json', 'r') as file:    dict = json.load(file)    print(my_dict)</code></pre><p>这里的type(dict)就是dict了，load给他从json变成dict了</p><h2 id="就酱"><a href="#就酱" class="headerlink" title="就酱"></a>就酱</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 超级高技术力 </tag>
            
            <tag> 有人python学了就忘我不说是谁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读写文件</title>
      <link href="/2023/04/12/7360.html"/>
      <url>/2023/04/12/7360.html</url>
      
        <content type="html"><![CDATA[<h2 id="读一个文本文件"><a href="#读一个文本文件" class="headerlink" title="读一个文本文件"></a>读一个文本文件</h2><h4 id="芝士文本"><a href="#芝士文本" class="headerlink" title="芝士文本"></a>芝士文本</h4><p><img src="/python%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/1.png" alt="芝士文本"></p><pre class=" language-Python"><code class="language-Python">file = open('a.txt', 'r', encoding='utf-8')print(file.read())#file.read是把文件内容读出来生成的字符串file.close()</code></pre><p>芝士读它把它全都打印出来，包括换行</p><pre class=" language-Python"><code class="language-Python">line=file.readline()print(line)lines=file.readlines()for l in lines:    print(l)</code></pre><p>首先读入a的第一行你马马死了，存入line，打印</p><p>然后读入a的剩余，用那个啥[]存放,也就是[‘我马马也死了’,’大家的马马都死了’]</p><p>这里是继续读入的</p><pre class=" language-Python"><code class="language-Python">with open("a.txt",'r',encoding='utf-8')as file:    print(file.read())</code></pre><p>这里是更好看的操作文件，with结束后就自动close，</p><p>但是要记住as file那个啥的</p><h2 id="读涩图"><a href="#读涩图" class="headerlink" title="读涩图"></a>读涩图</h2><p>格式要二进制</p><pre class=" language-Python"><code class="language-Python">with open('b.jpg', 'rb') as file1,open('c.jpg','rb')as file2:        data = file1.read()        file2.write(data)</code></pre><h4 id="一点点读入省内存"><a href="#一点点读入省内存" class="headerlink" title="一点点读入省内存"></a>一点点读入省内存</h4><pre class=" language-Python"><code class="language-Python">data=file1.read(512)while data:    file2.write(data)    data=file1.read(512)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 超级高技术力 </tag>
            
            <tag> 有人python学了就忘我不说是谁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源我的C大小作业（公然作弊了属于是</title>
      <link href="/2023/04/09/14403.html"/>
      <url>/2023/04/09/14403.html</url>
      
        <content type="html"><![CDATA[<p>你好，这是Bing。我根据你给的关键词，用md格式写了一个hexo的博客文件，报告你新写的翻牌游戏程序。它的内容是这样的：</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我最近用C语言写了一个简单的翻牌游戏程序，它可以在命令行界面运行，玩法很简单，就是在一定时间内尽可能多地找出相同的牌。我想在这篇博客中介绍一下我的程序的设计思路和实现细节，希望能对有兴趣的读者有所帮助。</p><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><p>我的程序一共有三个文件：cards.c, cards.h 和 memorize.c。cards.c 和 cards.h 是一个模块，它定义了一些关于牌的数据结构和函数，比如创建牌组，洗牌，显示牌等。memorize.c 是主程序，它调用cards模块的函数来实现游戏的逻辑和交互。</p><p>cards.c 和 cards.h 的代码如下：</p><h2 id="card-h"><a href="#card-h" class="headerlink" title="card.h:"></a>card.h:</h2><p>‘’’</p><pre><code>#ifndef __CARD_H_#define __CARD_H_#define CARDX 4#define CARDY 4#define CARDN (CARDX * CARDY)#define GAPX  0.2#define GAPY  0.2typedef enum {    STATE_HIDE,    STATE_SHOW,    STATE_MATCHED,    STATE_HINT,    STATE_LOLOL} State;typedef struct {    State state;    double x, y;    double width, height;    char *colorName;    void (*drawFunc)(struct Card *pCard);} Card;void DrawCardBoundary(Card *pCard);void DrawBlindCard(Card *pCard);void DrawSquare(Card *pCard);void DrawRect(Card *pCard);void DrawTriangle(Card *pCard);void DrawCircle(Card *pCard);void DrawTrapezoid(Card *pCard);void DrawParallellogram(Card *pCard);void DrawClip(Card *pCard);void DrawTree(Card *pCard);void DrawFace(Card *pCard);void DrawArcheryTarget(Card *pCard);void DrawDiagram(Card *pCard);void Drawlolol(Card* pCard);//void Drawlololcard(Card* pCard);#endif</code></pre><h2 id="card-c"><a href="#card-c" class="headerlink" title="card.c:"></a>card.c:</h2><p>‘’’</p><pre><code>#include "libgraphics/extgraph.h"#include "card.h"extern int n;void DrawCardBoundary(Card *pCard){    MovePen(pCard-&gt;x, pCard-&gt;y);    SetPenColor("Black");    DrawLine(0, pCard-&gt;height);    DrawLine(pCard-&gt;width, 0);    DrawLine(0, -pCard-&gt;height);    DrawLine(-pCard-&gt;width, 0);}/*void DrawEnding() {    MovePen(GetWindowWidth()/2, GetWindowHeight()/2);    SetPenColor("Black");    char* str = { 0 };    double fontAscent = GetFontAscent();    double tw = TextStringWidth(str);    DrawTextString(str);}*/void DrawBlindCard(Card *pCard){    MovePen(pCard-&gt;x, pCard-&gt;y);    SetPenColor("Light Gray");    StartFilledRegion(1);     DrawLine(0, pCard-&gt;height);    DrawLine(pCard-&gt;width, 0);    DrawLine(0, -pCard-&gt;height);    DrawLine(-pCard-&gt;width, 0);    EndFilledRegion();}/*void Drawlololcard(Card* pCard){    MovePen(pCard-&gt;x, pCard-&gt;y);    SetPenColor("Yellow");    StartFilledRegion(1);    DrawLine(0, pCard-&gt;height);    DrawLine(pCard-&gt;width, 0);    DrawLine(0, -pCard-&gt;height);    DrawLine(-pCard-&gt;width, 0);    EndFilledRegion();    MovePen(pCard-&gt;x, pCard-&gt;y);    SetPenColor("White");    char* str = "YES!!";    printf("%s", str);    double fontAscent = GetFontAscent();    double tw = TextStringWidth(str);}*/void DrawSquare(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;        double len = pCard-&gt;width * 0.6;    MovePen(cx - len / 2, cy - len / 2);    SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);     DrawLine(0, len);    DrawLine(len, 0);    DrawLine(0, -len);    DrawLine(-len, 0);    EndFilledRegion();        char *str = "helloc";    double fontAscent  = GetFontAscent();    double tw = TextStringWidth(str);    MovePen(cx - tw / 2, cy - fontAscent / 2);    SetPenColor("Black");    DrawTextString(str);}void DrawRect(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;        double w = pCard-&gt;width * 0.7;    double h = pCard-&gt;width * 0.5;    MovePen(cx - w / 2, cy - h / 2);    SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);     DrawLine(0, h);    DrawLine(w, 0);    DrawLine(0, -h);    DrawLine(-w, 0);    EndFilledRegion();}void DrawTriangle(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;        double len = pCard-&gt;width * 0.7;    MovePen(cx, cy + len * sqrt(3) / 4);    SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);     DrawLine(-len / 2, -len * sqrt(3) / 2);    DrawLine(len, 0);    DrawLine(-len / 2, len * sqrt(3) / 2);    EndFilledRegion();}void DrawCircle(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;        double r  = pCard-&gt;width * 0.35;    MovePen(cx + r, cy);    SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);    DrawArc(r, 0, 360);    EndFilledRegion();}void DrawTrapezoid(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;        double w = pCard-&gt;width * 0.4;    double h = pCard-&gt;height * 0.5;    MovePen(cx - w / 2, cy + h / 2);    SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);     DrawLine(-w / 2, -h);    DrawLine(w * 2, 0);    DrawLine(-w / 2, h);    DrawLine(-w, 0);    EndFilledRegion();}void DrawParallellogram(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;        double w = pCard-&gt;width * 0.6;    double h = pCard-&gt;height * 0.5;    double s = pCard-&gt;width * 0.1;    MovePen(cx - w / 2, cy + h / 2);    SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);     DrawLine(-s, -h);    DrawLine(w + s, 0);    DrawLine(s, h);    DrawLine(-w - s, 0);    EndFilledRegion();}void DrawClip(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;    double l  = pCard-&gt;width * 0.4;    double r  = pCard-&gt;width / 8;        int penSize = GetPenSize();    SetPenSize(2);    SetPenColor(pCard-&gt;colorName);    MovePen(cx - l / 5 * 2, cy - r);    DrawLine(l, 0);    DrawArc(r, -90, 180);    DrawLine(-l / 5 * 6, 0);    DrawArc(r * 0.94, 90, 180);    DrawLine(l, 0);    DrawArc(r * 0.88, -90, 180);    DrawLine(-l / 5 * 4, 0);    SetPenSize(penSize);}void DrawTree(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;    double w  = pCard-&gt;width;    double h  = pCard-&gt;height;        pCard-&gt;colorName = "Brown";    SetPenColor(pCard-&gt;colorName);    MovePen(cx - 0.02, cy);    StartFilledRegion(1);    DrawLine(0.04, 0);    DrawLine(0.01, -h * 0.4);    DrawLine(-0.06, 0);    DrawLine(0.01, h * 0.4);    EndFilledRegion();        SetPenColor("Green");    MovePen(cx, cy + h * 0.35);    StartFilledRegion(1);     DrawLine(w * 0.3, -h * 0.25);    DrawLine(-w * 0.6, 0);    DrawLine(w * 0.3, h * 0.25);    EndFilledRegion();        MovePen(cx, cy + h * 0.25);    StartFilledRegion(1);     DrawLine(w * 0.35, -h * 0.25);    DrawLine(-w * 0.7, 0);    DrawLine(w * 0.35, h * 0.25);    EndFilledRegion();        MovePen(cx, cy + h * 0.15);    StartFilledRegion(1);     DrawLine(w * 0.4, -h * 0.25);    DrawLine(-w * 0.8, 0);    DrawLine(w * 0.4, h * 0.25);    EndFilledRegion();}void DrawFace(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;    double headWidth  = pCard-&gt;width * 0.8;    double headHeight = pCard-&gt;height * 0.8;    SetPenColor("Gray");    StartFilledRegion(1);    MovePen(cx - headWidth / 2, cy - headHeight / 2);    DrawLine(headWidth, 0);    DrawLine(0, headHeight);    DrawLine(-headWidth, 0);    DrawLine(0, -headHeight);    EndFilledRegion();        double eyeRadius = pCard-&gt;width * 0.06;    double x = cx - headWidth / 5 + eyeRadius;    double y = cy + headHeight / 4;        SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);    MovePen(x, y);    DrawArc(eyeRadius, 0, 360);    EndFilledRegion();         x = cx + headWidth / 5 + eyeRadius;    y = cy + headHeight / 4;    StartFilledRegion(1);    MovePen(x, y);    DrawArc(eyeRadius, 0, 360);    EndFilledRegion();         double mouseWidth  = pCard-&gt;width * 0.36;    double mouseHeight = pCard-&gt;width * 0.12;    x = cx - mouseWidth / 2;    y = cy - headHeight / 4 - mouseHeight / 2;    SetPenColor("White");    StartFilledRegion(1);    MovePen(x, y);    DrawLine(mouseWidth, 0);    DrawLine(0, mouseHeight);    DrawLine(-mouseWidth, 0);    DrawLine(0, -mouseHeight);    EndFilledRegion(); }void DrawArcheryTarget(Card *pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;    double r1 = pCard-&gt;width * 0.5;    double r2 = pCard-&gt;width * 0.3;    double r3 = pCard-&gt;width * 0.1;</code></pre><p>​<br>        SetPenColor(pCard-&gt;colorName);<br>        StartFilledRegion(1);<br>        MovePen(cx + r1, cy);<br>        DrawArc(r1, 0, 360);<br>        EndFilledRegion();</p><pre><code>    SetPenColor("White");    StartFilledRegion(1);    MovePen(cx + r2, cy);    DrawArc(r2, 0, 360);    EndFilledRegion();        SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);    MovePen(cx + r3, cy);    DrawArc(r3, 0, 360);    EndFilledRegion();</code></pre><p>​<br>    }<br>    void DrawDiagram(Card *pCard){<br>        double cx = pCard-&gt;x + pCard-&gt;width / 2;<br>        double cy = pCard-&gt;y + pCard-&gt;height / 2;</p><pre><code>    double a = pCard-&gt;width * 0.6;    double b = pCard-&gt;width * 0.2;    MovePen(cx - a / 2, cy - a / 2);    SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);     DrawLine(0, -b);    DrawLine(a, 0);    DrawLine(0, b);    DrawLine(-a, 0);    EndFilledRegion();    MovePen(cx - a / 2, cy + a / 2);    StartFilledRegion(1);    DrawLine(0, b);    DrawLine(a, 0);    DrawLine(0, -b);    DrawLine(-a, 0);    EndFilledRegion();    MovePen(cx , cy + a / 2 -b);    SetPenColor("Black");    DrawLine(0,-a);    char *str = "program1";    double fontAscent  = GetFontAscent();    double tw = TextStringWidth(str);    MovePen(cx - tw / 2, cy + a / 2 + b / 2 - fontAscent / 2);    DrawTextString(str);    char *str2 = "program2";    double fontAscent2  = GetFontAscent();    double tw2 = TextStringWidth(str2);    MovePen(cx - tw2 / 2, cy -a/2-b/2- fontAscent2 / 2);    DrawTextString(str2);    }void Drawlolol(Card* pCard){    double cx = pCard-&gt;x + pCard-&gt;width / 2;    double cy = pCard-&gt;y + pCard-&gt;height / 2;    double r = pCard-&gt;width * 0.2;    double ax = pCard-&gt;x - pCard-&gt;width / 2;    double ay = pCard-&gt;y - pCard-&gt;height / 2;    SetPenColor(pCard-&gt;colorName);    StartFilledRegion(1);    MovePen(cx , cy);    DrawArc(r, 0, 360);    EndFilledRegion();    SetPenColor("Black");    StartFilledRegion(1);    MovePen(cx, cy);    DrawLine(r*1.5, 0);    DrawLine(0, r*1.5);    DrawLine(-r*1.5, 0);    DrawLine(0, -r*1.5);    EndFilledRegion();}</code></pre><p>主程序代码如下：</p><h2 id="memorize-c"><a href="#memorize-c" class="headerlink" title="memorize.c"></a>memorize.c</h2><p>‘’’</p><pre><code>#include &lt;windows.h&gt;#include &lt;winuser.h&gt;#include "libgraphics/extgraph.h"#include "libgraphics/random.h"#include "card.h"Card cards[CARDN];int firstClickIndex, secondClickIndex;void MouseEventProcess(int x, int y, int button, int event);void TimerEventProcess(int timerID);void KeyboardEventProcess(int key, int event);void InitCards(){    DefineColor("new1", 1, 0.9, 0);    DefineColor("new2", 0, 1, 0.4);    double windowWidth  = GetWindowWidth();    double windowHeight = GetWindowHeight();    double cardWidth    = (windowWidth  - GAPX * (CARDX + 1)) / CARDX;    double cardHeight   = (windowHeight - GAPY * (CARDY + 1)) / CARDY;        int i, j;    char *colors[] = { "Red", "Green", "Blue", "Brown", "Orange", "Yellow", "Violet", "Magenta", "Cyan","new1","new2"};    void (*drawFuncs[])(Card *pCard) = { DrawSquare, DrawRect, DrawCircle, DrawTrapezoid, DrawParallellogram, DrawClip, DrawTree, DrawFace,DrawArcheryTarget,Drawlolol,DrawDiagram };        for (i = 0; i &lt; CARDX; i++) {        double x = GAPX + (cardWidth + GAPX) * i;        for (j = 0; j &lt; CARDY; j++) {            double y = GAPY + (cardHeight + GAPY) * j;            int index = j * CARDX + i;            cards[index].x = x;            cards[index].y = y;            cards[index].width  = cardWidth;            cards[index].height = cardHeight;            cards[index].state  = STATE_HIDE;            if (index % 2 == 0) {                int sf = RandomInteger(0, sizeof(drawFuncs)/sizeof(drawFuncs[0])-1);                int sc = RandomInteger(0, sizeof(colors)/sizeof(colors[0]) - 1);                cards[index].drawFunc  = drawFuncs[sf];                cards[index].colorName = colors[sc];            } else {                cards[index].drawFunc  = cards[index - 1].drawFunc;                cards[index].colorName = cards[index - 1].colorName;            }        }    }</code></pre><p>​<br>​<br>​<br>    for (i = CARDN - 1; i &gt; 0; i–) {<br>        int j = RandomInteger(0, i);<br>        double tempx = cards[i].x;<br>        double tempy= cards[i].y;<br>        cards[i].x = cards[j].x;<br>        cards[i].y = cards[j].y;<br>        cards[j].x = tempx;<br>        cards[j].y = tempy;<br>    }<br>        firstClickIndex = -1;<br>        secondClickIndex = -1;<br>    }</p><pre><code>void InitGame(){    //DefineColor("silver", 192, 192, 192);     //DefineColor("gold",255, 204, 0);    Randomize();    registerKeyboardEvent(KeyboardEventProcess);    registerMouseEvent(MouseEventProcess);    registerTimerEvent(TimerEventProcess);    /* Step 3 define two colors */    InitCards();    }void Display(){    DisplayClear();    int i;    int flag = 0;    for (i = 0; i &lt; CARDN; i++) {        if (cards[i].state == STATE_HIDE)            DrawBlindCard(cards + i);        else if (cards[i].state == STATE_SHOW || cards[i].state == STATE_HINT) {            cards[i].drawFunc(cards + i);            flag = 1;        }        /*else if (cards[i].state == STATE_LOLOL)            Drawlololcard(cards + i);*        if (flag == 1) {            DrawEnding();        }*/        DrawCardBoundary(cards + i);    }}void Main(){    SetWindowTitle("Memorize");    SetWindowSize(9, 11);    InitGraphics();    //InitConsole();    InitGame();        Display();}int isWaiting = 0;void MouseEventProcess(int x, int y, int button, int event) {    if (button == LEFT_BUTTON &amp;&amp; event == BUTTON_DOWN) {        if (isWaiting == 1) {            return 0;        }        double gx = ScaleXInches(x);        double gy = ScaleYInches(y);        int i;        for (i = 0; i &lt; CARDN; i++) {            if (gx &gt;= cards[i].x &amp;&amp; gx &lt;= cards[i].x + cards[i].width &amp;&amp; gy &gt;= cards[i].y &amp;&amp; gy &lt;= cards[i].y + cards[i].height) {                if (cards[i].state == STATE_HIDE||cards[i].state==STATE_LOLOL) {                    printf("hide,card %d\n", i);                    cards[i].state = STATE_SHOW;                    if (firstClickIndex == -1) {                        firstClickIndex = i;                        printf("first");                        //n += 1;                    }                    else {                        secondClickIndex = i;                        printf("seciond");                        startTimer(1, 1000);                        //SetTimer(NULL, 1, 500, TimerEventProcess);                        isWaiting = 1;                        //n += 1;                    }                }                break;            }        }        Display();    }/*    else if (button == RIGHT_BUTTON &amp;&amp; event == BUTTON_DOWN) {                if (firstClickIndex == -1) {                        return 0;        }        double gx = ScaleXInches(x);        double gy = ScaleYInches(y);        int i;        for (i = 0; i &lt; CARDN; i++) {            if (gx &gt;= cards[i].x &amp;&amp; gx &lt;= cards[i].x + cards[i].width &amp;&amp; gy &gt;= cards[i].y &amp;&amp; gy &lt;= cards[i].y + cards[i].height) {                                if (cards[firstClickIndex].drawFunc == cards[i].drawFunc &amp;&amp; strcmp(cards[firstClickIndex].colorName, cards[i].colorName) == 0) {                    cards[i].state == STATE_LOLOL;                    Display();                    startTimer(3, 1000);                    printf("172635789442");                }                break;            }        }    }*/}void TimerEventProcess(int timerID) {    if (timerID == 1) {        if (cards[firstClickIndex].drawFunc == cards[secondClickIndex].drawFunc &amp;&amp; strcmp(cards[firstClickIndex].colorName, cards[secondClickIndex].colorName) == 0) {            cards[firstClickIndex].state = STATE_MATCHED;            cards[secondClickIndex].state = STATE_MATCHED;        }        else {            cards[firstClickIndex].state = STATE_HIDE;            cards[secondClickIndex].state = STATE_HIDE;        }        printf("yes");        firstClickIndex = -1;        secondClickIndex = -1;        isWaiting = 0;        printf("%d", secondClickIndex);        cancelTimer(1);        Display();    }    else if(timerID==2) {        int i;        for (i = 0; i &lt; CARDN; i++) {            if (cards[i].state == STATE_HINT) {                cards[i].state = STATE_HIDE;            }        }        Display();    }/*    else {        int i;        for (i = 0; i &lt; CARDN; i++) {            if (cards[i].state == STATE_LOLOL) {                cards[i].state = STATE_HIDE;            }        }        Display();    }*/    }    void KeyboardEventProcess(int key, int event) {        if (event == KEY_DOWN) {            if (key == VK_F5) {                InitCards();                Display();            }            else if (key == 'x' || key == 'X') {                int i;                for (i = 0; i &lt; CARDN; i++) {                    if (cards[i].state == STATE_HIDE) {                        cards[i].state = STATE_HINT;                    }                }                Display();                startTimer(2, 1000);            }        }    }</code></pre><h3 id="我是笨蛋"><a href="#我是笨蛋" class="headerlink" title="我是笨蛋"></a>我是笨蛋</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 日常发癫 </tag>
            
            <tag> 超级高技术力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>呼呼呼堂堂复活！</title>
      <link href="/2023/04/08/54612.html"/>
      <url>/2023/04/08/54612.html</url>
      
        <content type="html"><![CDATA[<h3 id="很遗憾，我骗了大家"><a href="#很遗憾，我骗了大家" class="headerlink" title="很遗憾，我骗了大家"></a>很遗憾，我骗了大家</h3><p>在此对大家说声对不起<br>其实我是魔法少女，为了拯救这个世界，不得不消失一段时间。<br>但是呢，从今天起</p><h1 id="得得喵喵堂堂复活！"><a href="#得得喵喵堂堂复活！" class="headerlink" title="得得喵喵堂堂复活！"></a>得得喵喵堂堂复活！</h1><p>就是这样，喵</p>]]></content>
      
      
      <categories>
          
          <category> 答辩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常发癫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
